{"ast":null,"code":"var _jsxFileName = \"/Users/viktorkardvik/Code/CB5Capital/ImpViz/Frontend/TradingBarReact/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport ConnectionStatus from './components/ConnectionStatus';\nimport MarketSummary from './components/MarketSummary';\nimport MarketSelector from './components/MarketSelector';\nimport SignalDisplay from './components/SignalDisplay';\nimport HistoricalChart from './components/HistoricalChart';\nimport { useWebSocket } from './hooks/useWebSocket';\nimport { convertSignalsToMarketFormat } from './utils/dataProcessing';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [environment, setEnvironment] = useState('prod');\n  const [selectedMarket, setSelectedMarket] = useState('ES');\n  const [marketData, setMarketData] = useState({});\n  const [scoreHistory, setScoreHistory] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('DISCONNECTED');\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const websocketUrl = environment === 'local' ? 'ws://localhost:8765' : 'ws://134.209.184.5:8765';\n  console.log('Current WebSocket URL:', websocketUrl);\n  console.log('Environment:', environment);\n  const onMessage = useCallback(data => {\n    console.log('Received WebSocket message:', data);\n    if (data.type === 'error') {\n      console.error('WebSocket error:', data.message);\n      return;\n    }\n    const rawData = data.data || {};\n    let processedData;\n    if ('signals_by_market' in rawData) {\n      processedData = convertSignalsToMarketFormat(rawData);\n    } else {\n      processedData = rawData;\n    }\n    console.log('Processed market data:', processedData);\n    setMarketData(processedData);\n    setLastUpdate(new Date());\n    if (processedData[selectedMarket]) {\n      updateScoreHistory(processedData[selectedMarket]);\n    }\n  }, [selectedMarket]);\n  const {\n    sendMessage,\n    isConnected,\n    connectionAttempts,\n    lastError,\n    connectionState\n  } = useWebSocket(websocketUrl, onMessage, () => {\n    console.log('WebSocket connected successfully!');\n    setConnectionStatus('Connected');\n  }, () => {\n    console.log('WebSocket disconnected');\n    setConnectionStatus('DISCONNECTED');\n  });\n  useEffect(() => {\n    if (isConnected) {\n      // Send initial request\n      sendMessage({\n        type: 'get_latest'\n      });\n\n      // Set up polling with error handling\n      const interval = setInterval(() => {\n        if (isConnected) {\n          sendMessage({\n            type: 'get_latest'\n          });\n        }\n      }, 5000); // Reduced frequency to 5 seconds to reduce server load\n\n      return () => clearInterval(interval);\n    }\n  }, [isConnected, sendMessage]);\n  const updateScoreHistory = marketInfo => {\n    const longData = marketInfo.Long || {};\n    const shortData = marketInfo.Short || {};\n    const longScore = longData.final_score || 0;\n    const shortScore = shortData.final_score || 0;\n    const netDifference = Math.abs(longScore - shortScore);\n    const winner = longScore > shortScore ? 'LONG' : shortScore > longScore ? 'SHORT' : 'NEUTRAL';\n    setScoreHistory(prev => {\n      const newHistory = [...prev, {\n        timestamp: new Date(),\n        longScore,\n        shortScore,\n        netDifference,\n        winner\n      }];\n      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n      return newHistory.filter(item => item.timestamp > fiveMinutesAgo);\n    });\n  };\n  const availableMarkets = Object.keys(marketData).sort();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ImpViz Active Trader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n        status: connectionStatus,\n        lastUpdate: lastUpdate,\n        connectionAttempts: connectionAttempts,\n        lastError: lastError,\n        connectionState: connectionState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(MarketSelector, {\n        markets: availableMarkets,\n        selectedMarket: selectedMarket,\n        onMarketChange: setSelectedMarket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"env-toggle\",\n        onClick: () => setEnvironment(env => env === 'prod' ? 'local' : 'prod'),\n        children: environment === 'prod' ? 'Production' : 'Local'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MarketSummary, {\n      marketData: marketData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), marketData[selectedMarket] && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SignalDisplay, {\n        marketData: marketData[selectedMarket],\n        marketName: selectedMarket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(HistoricalChart, {\n        scoreHistory: scoreHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"t4Hlcv82OkD7y6G5/zORi8Gf9Fw=\", false, function () {\n  return [useWebSocket];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ConnectionStatus","MarketSummary","MarketSelector","SignalDisplay","HistoricalChart","useWebSocket","convertSignalsToMarketFormat","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","environment","setEnvironment","selectedMarket","setSelectedMarket","marketData","setMarketData","scoreHistory","setScoreHistory","connectionStatus","setConnectionStatus","lastUpdate","setLastUpdate","websocketUrl","console","log","onMessage","data","type","error","message","rawData","processedData","Date","updateScoreHistory","sendMessage","isConnected","connectionAttempts","lastError","connectionState","interval","setInterval","clearInterval","marketInfo","longData","Long","shortData","Short","longScore","final_score","shortScore","netDifference","Math","abs","winner","prev","newHistory","timestamp","fiveMinutesAgo","now","filter","item","availableMarkets","Object","keys","sort","className","children","fileName","_jsxFileName","lineNumber","columnNumber","status","markets","onMarketChange","onClick","env","marketName","_c","$RefreshReg$"],"sources":["/Users/viktorkardvik/Code/CB5Capital/ImpViz/Frontend/TradingBarReact/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport ConnectionStatus from './components/ConnectionStatus';\nimport MarketSummary from './components/MarketSummary';\nimport MarketSelector from './components/MarketSelector';\nimport SignalDisplay from './components/SignalDisplay';\nimport HistoricalChart from './components/HistoricalChart';\nimport { useWebSocket } from './hooks/useWebSocket';\nimport { convertSignalsToMarketFormat } from './utils/dataProcessing';\n\nfunction App() {\n  const [environment, setEnvironment] = useState('prod');\n  const [selectedMarket, setSelectedMarket] = useState('ES');\n  const [marketData, setMarketData] = useState({});\n  const [scoreHistory, setScoreHistory] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('DISCONNECTED');\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  const websocketUrl = environment === 'local' \n    ? 'ws://localhost:8765' \n    : 'ws://134.209.184.5:8765';\n\n  console.log('Current WebSocket URL:', websocketUrl);\n  console.log('Environment:', environment);\n\n  const onMessage = useCallback((data) => {\n    console.log('Received WebSocket message:', data);\n    \n    if (data.type === 'error') {\n      console.error('WebSocket error:', data.message);\n      return;\n    }\n\n    const rawData = data.data || {};\n    \n    let processedData;\n    if ('signals_by_market' in rawData) {\n      processedData = convertSignalsToMarketFormat(rawData);\n    } else {\n      processedData = rawData;\n    }\n    \n    console.log('Processed market data:', processedData);\n    setMarketData(processedData);\n    setLastUpdate(new Date());\n    \n    if (processedData[selectedMarket]) {\n      updateScoreHistory(processedData[selectedMarket]);\n    }\n  }, [selectedMarket]);\n\n  const { sendMessage, isConnected, connectionAttempts, lastError, connectionState } = useWebSocket(\n    websocketUrl,\n    onMessage,\n    () => {\n      console.log('WebSocket connected successfully!');\n      setConnectionStatus('Connected');\n    },\n    () => {\n      console.log('WebSocket disconnected');\n      setConnectionStatus('DISCONNECTED');\n    }\n  );\n\n  useEffect(() => {\n    if (isConnected) {\n      // Send initial request\n      sendMessage({ type: 'get_latest' });\n      \n      // Set up polling with error handling\n      const interval = setInterval(() => {\n        if (isConnected) {\n          sendMessage({ type: 'get_latest' });\n        }\n      }, 5000); // Reduced frequency to 5 seconds to reduce server load\n      \n      return () => clearInterval(interval);\n    }\n  }, [isConnected, sendMessage]);\n\n  const updateScoreHistory = (marketInfo) => {\n    const longData = marketInfo.Long || {};\n    const shortData = marketInfo.Short || {};\n    \n    const longScore = longData.final_score || 0;\n    const shortScore = shortData.final_score || 0;\n    \n    const netDifference = Math.abs(longScore - shortScore);\n    const winner = longScore > shortScore ? 'LONG' : shortScore > longScore ? 'SHORT' : 'NEUTRAL';\n    \n    setScoreHistory(prev => {\n      const newHistory = [...prev, {\n        timestamp: new Date(),\n        longScore,\n        shortScore,\n        netDifference,\n        winner\n      }];\n      \n      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n      return newHistory.filter(item => item.timestamp > fiveMinutesAgo);\n    });\n  };\n\n  const availableMarkets = Object.keys(marketData).sort();\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>ImpViz Active Trader</h1>\n        <ConnectionStatus \n          status={connectionStatus} \n          lastUpdate={lastUpdate} \n          connectionAttempts={connectionAttempts}\n          lastError={lastError}\n          connectionState={connectionState}\n        />\n      </header>\n      \n      <div className=\"controls\">\n        <MarketSelector \n          markets={availableMarkets}\n          selectedMarket={selectedMarket}\n          onMarketChange={setSelectedMarket}\n        />\n        <button \n          className=\"env-toggle\"\n          onClick={() => setEnvironment(env => env === 'prod' ? 'local' : 'prod')}\n        >\n          {environment === 'prod' ? 'Production' : 'Local'}\n        </button>\n      </div>\n\n      <MarketSummary marketData={marketData} />\n      \n      {marketData[selectedMarket] && (\n        <>\n          <SignalDisplay \n            marketData={marketData[selectedMarket]}\n            marketName={selectedMarket}\n          />\n          <HistoricalChart scoreHistory={scoreHistory} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}